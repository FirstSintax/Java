import java.util.*;
// framework for finding num steps to traverse a graph from a start
public class NodeBFS {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		int e = in.nextInt();
		int start = 0;
		LinkedList<Integer>[] edges = new LinkedList[n+1];
		for(int i = 0; i <= n; i++) {
			edges[i] = new LinkedList<Integer>();
		}
		//if there is a start and end node, input manually	
		for(int i = 0;i<e;i++) {
			int x = in.nextInt();
			if(i == 0) {
				start = x;
			}
			int y = in.nextInt();
			edges[x].add(y);
			// if bidirectional
			edges[y].add(x);
		}
		ArrayList<Integer> cur = new ArrayList<>();
		ArrayList<Integer> next = new ArrayList<>();
		boolean[] vis = new boolean[n+1];
		vis[start] = true;
		cur.addAll(edges[start]);
		int steps = 0;
		int numVis = 1;
		bfs: while(numVis!=n) {
			for(Integer p : cur) {
				/** optional break statement
				if(p = end) {
					break bfs;
				}
				**/
				if(!vis[p]) {
					vis[p] = true;
					numVis++;
					next.addAll(edges[p]);
				}
			}
			steps++;
			cur.clear();
			cur.addAll(next);
			next.clear();
		}
		System.out.println(steps);
	}
}
