import java.awt.*;

public class DSNode {

    //Segment tree node constructor
    //Size is predefined

    public int val;
    public DSNode left, right;
    public Point range;
    public DSNode(Point p) {
        range = p;
        if (!isLeaf()) {
            int mid = (range.x + range.y) / 2;
            left = new DSNode(new Point(range.x, mid));
            right = new DSNode(new Point(mid + 1, range.y));
        }
    }

    public int update(int index, int x) {
        if (isLeaf()) {
            int dif = x - this.val;
            this.val = x;
            return dif;
        }
        if (left.inRange(index)) {
            int dif = left.update(index, x);
            this.val += dif;
            return dif;
        } else {
            int dif = right.update(index, x);
            this.val += dif;
            return dif;
        }
    }

    public int query(int a, int b) {
        if (a <= range.x && range.y <= b) {
            return this.val;
        } else if (b < range.x || range.y < a) {
            return 0;
        } else {
            //This can be manipulated to fit any other queries
            return left.query(a, b) + right.query(a, b);
        }
    }

    public boolean inRange(int index) {return range.x <= index && index <= range.y;}
    public boolean isLeaf() {return range.x == range.y;}
}
