import java.util.ArrayList;
import java.util.Arrays;

//Generating full set of permutation O(n * n!)
//Compared to naive solution of O(n^n)
public class DPerm {

    public int permLength;
    public long maxVal;
    public long curID = -1;

    public DPerm(int permLength) {
        this.permLength = permLength;
        this.maxVal = factorial(this.permLength);
    }

    public int[] nextPerm() throws Exception {
        this.curID = (this.curID + 1)%maxVal;
        return getPerm(this.permLength, this.curID);
    }

    public void setPerm(int[] perm) {
        this.curID = getIndex(perm);
    }

    //Static methods
    public static long factorial(int n) {
        long ret = 1;
        for (int i = 2; i <= n; i++) {
            ret *= i;
        }
        return ret;
    }

    public static long getIndex(int[] perm) {
        ArrayList<Integer> ar = new ArrayList<>(perm.length);
        for (int i = 0; i < perm.length; i++) {
            ar.add(i);
        }
        long ret = 0;
        for (int i = perm.length - 1; i > 0; i--) {
            ret += ar.indexOf(perm[perm.length - 1 - i]);
            ret *= i;
            ar.remove(ar.indexOf(perm[perm.length - 1 - i]));
        }
        return ret;

    }

    //O(n) to generate next permutation
    public static int[] getPerm(int permLength, long id) throws Exception {
        if (factorial(permLength) <= id) {
            throw new Exception("Index out of range");
        }

        //Converts id to base factorial
        ArrayList<Integer> ar = new ArrayList<>(permLength);
        for (int i = 0; i < permLength; i++) {
            ar.add(i);
        }
        int[] baseFac = new int[permLength];
        for (int i = 1; i < permLength; i++) {
            baseFac[baseFac.length - 1 - i] = (int)(id%(i + 1));
            id /= (i + 1);
        }
        int[] ret = new int[permLength];
        for (int i = 0; i < baseFac.length; i++) {
            ret[i] = ar.remove(baseFac[i]);
        }
        return ret;
    }

    public static void main(String[] args) throws Exception {
        DPerm p = new DPerm(8);
        for (int i = 0; i < DPerm.factorial(8); i++) {
            System.out.println(Arrays.toString(p.nextPerm()));
        }
    }

}
