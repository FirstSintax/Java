
/**
 * Implementation of a Disjoint Union Set that is optimized with a flattening and ranking system.
 */

import java.util.Arrays;

public class DSet {

    //Stores the immediate parent of each node
    //No parent maps to -1
    private int[] parents;

    //Ranks groups by height of tree
    private int[] rank;

    //Gives size of a specific group. Note that due to parent referencing
    //size[i] does not necessarily always return the size of the group of index at i
    private int[] size;

    //Counts the number of groups stored by the DSet
    private int groups;

    public DSet(int n) {
        groups = n;
        parents = new int[n];
        size = new int[n];
        Arrays.fill(parents, -1);
        Arrays.fill(size, 1);
        rank = new int[n];
    }

    //Finds top level parent of a node
    public int find(int n) {
        if (parents[n] == -1) {
            return n;
        }
        //Flattens DSet
        int ret = find(parents[n]);
        parents[n] = ret;
        return ret;
    }

    //Returns true for successful union
    public boolean union(int a, int b) {
        int x = find(a), y = find(b);
        if (x == y && x != -1) {
            return false;
        } else {
            //Picking the smallest rank ensures optimized structure
            if (rank[x] == rank[y]) {
                parents[x] = y;
                rank[x] = rank[y] = rank[x] + 1;
            } else if (rank[x] < rank[y]) {
                parents[x] = y;
                rank[x] = rank[y];
            } else if (rank[y] < rank[x]) {
                parents[y] = x;
                rank[y] = rank[x];
            }
            size[x] = size[y] = size[x] + size[y];
        }
        //Each union ensures to decrease the groups by 1
        groups--;
        return true;
    }

    //Returns the number of groups. Note that as the DSet gets more complex, size decreases
    public int size() {
        return groups;
    }

    //Size of the group located at n
    public int size(int n) {
        return size[find(n)];
    }
}
