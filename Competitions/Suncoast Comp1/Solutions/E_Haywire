import java.awt.Point;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

public class EHaywire {

	//BFS twice, once from source to G1, then from G1 to G2
	//Saves a lot of lines to modulize code, but I was too lazy
	//O(n^2)

	public static void main(String[] args) throws IOException {
		Scanner in = new Scanner(System.in);
		int n = in.nextInt(), m = in.nextInt();
		in.nextLine();
		boolean[][] grid1 = new boolean[n][m];
		boolean[][] grid2 = new boolean[n][m];
		Point a = null;
		Point b = null;
		Point c = null;
		for (int i = 0; i < n; i++) {
			char[] ar = in.nextLine().toCharArray();
			for (int j = 0; j < m; j++) {
				if (ar[j] == '#') {
					grid1[i][j] = false;
					grid2[i][j] = false;
				} else {
					grid1[i][j] = true;
					grid2[i][j] = true;
					if (ar[j] == 'P') {
						b = new Point(i, j);
					}
					if (ar[j] == 'C') {
						a = new Point(i, j);
					}
					if (ar[j] == 'G') {
						c = new Point(i, j);
					}
				}
			}
		}
		
		ArrayList<Point> cur = new ArrayList<Point>();
		ArrayList<Point> next = new ArrayList<Point>();
		cur.add(a);
		grid1[a.x][a.y] = false;
		int step = 0;
BFS1:		while (true) {
			for (Point e : cur) {
				if (e.x == b.x && e.y == b.y) {
					break BFS1;
				}
				if (grid1[e.x - 1][e.y]) {
					grid1[e.x - 1][e.y] = false;
					next.add(new Point(e.x - 1,e.y));
				}
				if (grid1[e.x][e.y + 1]) {
					grid1[e.x][e.y + 1] = false;
					next.add(new Point(e.x,e.y + 1));
				}
				if (grid1[e.x + 1][e.y]) {
					grid1[e.x + 1][e.y] = false;
					next.add(new Point(e.x + 1,e.y));
				}
				if (grid1[e.x][e.y - 1]) {
					grid1[e.x][e.y - 1] = false;
					next.add(new Point(e.x,e.y - 1));
				}
			}
			cur.clear();
			cur.addAll(next);
			next.clear();
			step++;
		}
		cur.clear();
		next.clear();
		cur.add(b);
BFS2:		while (true) {
			for (Point e : cur) {
				if (e.x == c.x && e.y == c.y) {
					break BFS2;
				}
				if (grid2[e.x - 1][e.y]) {
					grid2[e.x - 1][e.y] = false;
					next.add(new Point(e.x - 1,e.y));
				}
				if (grid2[e.x][e.y + 1]) {
					grid2[e.x][e.y + 1] = false;
					next.add(new Point(e.x,e.y + 1));
				}
				if (grid2[e.x + 1][e.y]) {
					grid2[e.x + 1][e.y] = false;
					next.add(new Point(e.x + 1,e.y));
				}
				if (grid2[e.x][e.y - 1]) {
					grid2[e.x][e.y - 1] = false;
					next.add(new Point(e.x,e.y - 1));
				}
			}
			cur.clear();
			cur.addAll(next);
			next.clear();
			step++;
		}
		System.out.println(step);
		
	}
	
}
